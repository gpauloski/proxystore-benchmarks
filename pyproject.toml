[build-system]
requires = ["setuptools>=64.0", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "psbench"
version = "0.1.0"
authors = [
    {name = "Greg Pauloski", email = "jgpauloski@uchicago.edu"},
]
description = "ProxyStore benchmark suite."
readme = "README.md"
requires-python = ">=3.7"
license = {file = "LICENSE"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "colmena[globus]==0.5.0",
    "globus-compute-endpoint==2.0.3",
    "globus-compute-sdk==2.0.3",
    "proxystore[all]==0.5.0",
    "redis==4.5.5",
    "requests==2.28.2",
    "importlib-metadata; python_version<'3.8'",
]

[project.urls]
repository = "https://github.com/proxystore/proxystore-benchmarks"
documentation = "https://proxystore.readthedocs.io"

[project.optional-dependencies]
dev = [
    "asynctest; python_version<'3.8'",
    "black",
    "covdefaults>=2.2",
    "coverage",
    "mypy",
    "pre-commit",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "ruff",
    "tox",
    "types-redis",
    "types-requests",
    "virtualenv",
]

[tool.black]
line-length = 79
target-version = ["py37"]
skip-string-normalization = true

[tool.codespell]
skip = """
.git,
.github,
__pycache__,
build,
dist,
.*egg-info
"""

[tool.coverage.run]
plugins = ["covdefaults"]
concurrency = ["multiprocessing", "thread"]
parallel = true

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "testing.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[tool.ruff]
# See all rules here: https://beta.ruff.rs/docs/rules
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # PyLint
    "PLE", "PLW",
    # ruff-specific
    "RUF",
]
extend-ignore = [
    "D10",
    # Allow builtin attribute shadowing
    "A003",
    # Ruff will change all([generator]) to all(generator) because the all/any
    # generator expressions directly and the list comprehension is not needed.
    # However, coverage marks unfinished generators as not covered and
    # all/any can early exit before exhausting the generator.
    "C419",
    # Allow pytest.raises() without match
    "PT011",
]
target-version = "py37"

[tool.ruff.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.isort]
force-single-line = true
known-first-party = ["psbench", "test", "testing"]
order-by-type = false
required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401", "D104"]
"*/*_test.py" = ["D10"]
"benchmarks/*" = ["D10"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.setuptools.packages.find]
exclude = ["tests*", "testing*"]
namespaces = false
